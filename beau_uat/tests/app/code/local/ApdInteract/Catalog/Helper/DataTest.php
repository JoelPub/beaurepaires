<?php
require_once(__DIR__ . '/../../../../../../../app/Mage.php');
/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-02-23 at 11:43:18.
 */
class ApdInteract_Catalog_Helper_DataTest extends PHPUnit_Framework_TestCase {

    /**
     * @var ApdInteract_Catalog_Helper_Data
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        Mage::app();
        $this->object = Mage::helper('apdinteract_catalog');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }
    
    private function _dbr()
    {
        return Mage::getSingleton('core/resource')->getConnection('core/read');
    }
    
     /** @test
     * @covers ApdInteract_Catalog_Helper_Data
     * Checks for Duplicate records of Product using SKU
     */
    public function checkDuplicateProduct()
    {
        $sql = 'SELECT sku, entity_id FROM catalog_product_entity GROUP BY sku HAVING count(sku) > 1 ORDER BY entity_id ASC';
        $result = $this->_dbr()->fetchOne($sql);
        fwrite(STDOUT, print_r($result, true) . "\n");       
        
        $this->assertTrue(empty($result));
    }
    
    /**
     * @test
     * @covers ApdInteract_Catalog_Helper_Data::checkForEmptyFields
     * Checks for empty fields of products. These fields includes:
     * NAME,SKU,VISIBILITY,STATUS,CATEGORY IDS
     */
    public function checkForEmptyFields(){
        $product = $this->object->checkForEmptyFields();
        foreach ($product as $data){
            foreach ($data as $key => $value) {
                $value = trim($value);
                if (empty($value)){
                    $this->assertTrue($value);
                }
            }
        }
    }
    
    /**
     * @test
     * @covers ApdInteract_Catalog_Helper_Data::getChildIdsByParentId
     * Checks all the  simple Products assigned under a Configurable products
     * is associated by comparing product name to its parent's name.
     */
    public function configurableProductsWithChild(){
        $product = $this->object->compareChildsNametoParent();
        $this->assertTrue($product);
    }

}
