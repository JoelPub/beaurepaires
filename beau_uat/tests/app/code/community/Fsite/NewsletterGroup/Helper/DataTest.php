<?php
require_once(__DIR__.'/../../../../../../../app/Mage.php');

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-02-08 at 12:50:01.
 */
class Fsite_NewsletterGroup_Helper_DataTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var Fsite_NewsletterGroup_Helper_Data
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        Mage::app();
        $this->object = Mage::helper('newslettergroup');        
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }
    
    /**
     * @covers Fsite_NewsletterGroup_Helper_Data::syncSilverpopNewsletterGroups
     * @covers Fsite_NewsletterGroup_Helper_Data::syncNewsletterGroups
     * @covers Fsite_NewsletterGroup_Helper_Data::deleteGroupsNotInArray
     * @covers Fsite_NewsletterGroup_Helper_Data::addNewsletterGroup
     */
    public function testSyncSilverpopNewsletterGroups()
    {
        Mage::helper('silverpopapi')->silverpopLogin();
        $this->object->syncSilverpopNewsletterGroups();
        Mage::helper('silverpopapi')->silverpopLogout();
    }

    
    private function _reformatGroupsToArrayOfNames($groups)
    {
        foreach ($groups as $group)
        {
            $names[] = $group->getGroupName();
        }
        
        return $names;
    }
    
    /**
     * @covers Fsite_NewsletterGroup_Helper_Data::getGroups
     */
    public function testGetGroups()
    {
        $result = $this->object->getGroups();
        fwrite(STDOUT, print_r($result, true) . "\n"); // Dumps result to the output window. Useful for debugging        
        $names = $this->_reformatGroupsToArrayOfNames($result);
        fwrite(STDOUT, print_r($names, true) . "\n"); // Dumps result to the output window. Useful for debugging
        
        $expected_names = array(
            'Beaurepaires - Marketing - General Newsletter',
            'Beaurepaires - Marketing - Special Offers and Rewards',
            'Beaurepaires - Marketing - Product News',
            );
        
        foreach ($expected_names as $expected_name) 
        {
            $this->assertTrue(in_array($expected_name, $names));
        }        
    }

    /**
     * @covers Fsite_NewsletterGroup_Helper_Data::loadGroupByName
     */
    public function testLoadGroupByName()
    {
        $expected_name = 'Beaurepaires - Marketing - General Newsletter';
        $result = $this->object->loadGroupByName($expected_name);
        $actual_name = $result->getGroupName();
        $this->assertTrue($expected_name == $actual_name);
    }
}
