<?php
require_once(__DIR__.'/../../../../../../../app/Mage.php');

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-02-18 at 10:37:15.
 */
class ApdInteract_Requestprice_Helper_DataTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var ApdInteract_Requestprice_Helper_Data
     */
    protected $helper;
    private $_customer;
    private $_address;
    private $_class_cache;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    public function __construct()
    {
        Mage::app();        
        $this->helper->requestprice = Mage::helper('apdinteract_requestprice');

        parent::__construct();
    }
    
    
    protected function setUp()
    {

    }
    
    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->_restoreMagentoClasses();        
    }
    
    protected function _restoreMagentoClasses()
    {
        // Restore sessions
        foreach ($this->_class_cache as $mage_class_name=>$class)
        {
            Mage::unregister("_singleton/$mage_class_name");
            Mage::register("_singleton/$mage_class_name", $class); 
        }
    }
    
    protected function _getMockModel($mage_class)
    {       
        $this->_class_cache[$mage_class] = Mage::getModel($mage_class);
        
        $classname = Mage::getConfig()->getModelClassName($mage_class);
        $mockSession = $this->getMockBuilder($classname)
        ->disableOriginalConstructor()
        ->getMock();
        
        Mage::unregister("_singleton/$mage_class");
        Mage::register("_singleton/$mage_class", $mockSession);
        
        return $mockSession;        
    }
    
    protected function _getCustomer($customer = null)
    {
        if (isset($customer))
        {
            $this->_customer = $customer;            
        }
        
        if (!isset($this->_customer))
        {
            $this->_customer = Mage::getModel('customer/customer');
        }
        return $this->_customer;
    }
    
    protected function _getAddress($reset = false)
    {
        if (!isset($this->_address) || $reset)
        {
            $this->_address = Mage::getModel('customer/address');
        }
        return $this->_address;
    }
    
    protected function _mockCustomerSession($customer)
    {           
        $mockSession = $this->_getMockModel('customer/session');
        
        $mockSession->expects($this->any())
            ->method('authenticate')
            ->willReturn(true);
        
        $mockSession->expects($this->atLeastOnce())
            ->method('isLoggedIn')
            ->willReturn(true);

        $mockSession->expects($this->any())
            ->method('getCustomer')
            ->willReturn($customer);        
        
    }
    
     /**
     * @covers ApdInteract_Requestprice_Helper_Data::formatTestCartString
     */
    public function testFormatTestCartString()
    {
        $test_string = 'abc123|4|1,def123|2|0,ghi2039|6,hkj123|3|,ejd23876,,';
        
        $expected = Array
        (
            0 => Array
                (
                    'sku' => abc123,
                    'qty' => 4,
                    'child_option_index' => 1,
                ),
            1 => Array
                (
                    'sku' => def123,
                    'qty' => 2,
                    'child_option_index' => 0,
                ),
            2 => Array
                (
                    'sku' => ghi2039,
                    'qty' => 6,
                    'child_option_index' => ''
                ),
            3 => Array
                (
                    'sku' => hkj123,
                    'qty' => 3,
                    'child_option_index' => ''
                ),
            4 => Array
                (
                    'sku' => ejd23876,
                    'qty' => 1,
                    'child_option_index' => ''
                )
        );
        
        $actual = $this->helper->requestprice->formatTestCartString($test_string);
        
        $this->assertEquals($expected, $actual, "FAIL - Actual:" . print_r($actual, true) . ", Expected:"  . print_r($expected, true));
        
    }
    
    private function _getCartItemSummaryAsArray($items)
    {
        foreach ($items as $index => $item) 
        {
            if ($option = $item->getOptionByCode('simple_product')) 
            {
                $product = $option->getProduct();
            }
            else
            {
                $product = $item->getProduct();
            }
            
            $actual[$index]['sku'] = $product->getSku();
            $actual[$index]['qty'] = $item->getQty();
        }
        
        return $actual;
    }
    
    
    /**
     * @covers ApdInteract_Requestprice_Helper_Data::createTestCart    
     */
    public function testCreateTestCart()
    {
        $this->helper->requestprice->emptyCart();
        
        $test_string = '521461-P|6|0,529713-P|4|1,529713-P|5|2,MY_50001|1';
        $cart = $this->helper->requestprice->createTestCart($test_string);
        
        $items = $cart->getQuote()->getAllVisibleItems();
        $actual = $this->_getCartItemSummaryAsArray($items);
        
        $expected = Array(
            0 => Array ('sku' => '521461', 'qty' => 6),
            1 => Array ('sku' => '529684', 'qty' => 4),
            2 => Array ('sku' => '529685', 'qty' => 5),
            3 => Array ('sku' => 'MY_50001', 'qty' => 1)
        );
        
        $this->assertEquals($expected, $actual); 
        
        $this->helper->requestprice->emptyCart();
    }

    private function _deleteTestCustomer($email = 'test@test.com')
    {                
        $customer = $this->_loadCustomerByEmail($email);        
        $this->_deleteAllCustomerAddresses($customer);
        
        Mage::register('isSecureArea', true);
        $customer->delete();        
        Mage::unregister('isSecureArea');
    }
    
    private function _deleteAllCustomerAddresses($customer)
    {
        foreach ($customer->getAddresses() as $address)
        {
            $this->_deleteAddress($address);
        }
    }
    
    private function _deleteAddress($address)
    {
        Mage::register('isSecureArea', true);
        $address->delete();
        Mage::unregister('isSecureArea');        
    }
    
    private function _createTestCustomerAddress($customer)
    {
        $this->_deleteAllCustomerAddresses($customer);
        
        $address = $this->_getAddress($reset = true);                
        
        $address->setCustomerId($customer->getId())
                ->setFirstname($customer->getFirstname())
                // ->setMiddleName($customer->getMiddlename())
                ->setLastname($customer->getLastname())
                ->setCountryId('AU')                    
                //->setRegionId('1') //state/province, only needed if the country is USA
                ->setPostcode('3000')
                ->setCity('Melbourne')
                ->setTelephone('0409123456')
                ->setFax('0312345678')
                ->setCompany('APD')
                ->setStreet('69 Test Street')
                ->setIsDefaultBilling('1')
                ->setIsDefaultShipping('1')
                ->setSaveInAddressBook('1');
        $address->save();
        
        return $address;
    }
    
    private function _loadCustomerByEmail($email)
    {
        $customer = Mage::getModel("customer/customer");
        $customer->setWebsiteId(Mage::app()->getWebsite()->getId());
        $customer->loadByEmail($email); 
        return $customer;
    }
    
    private function _createTestCustomer($email = 'test@test.com')
    {
        $customer = $this->_loadCustomerByEmail($email);

        if ($customer->getId())
        {   
            $this->_deleteTestCustomer($email);
        }

        $websiteId = Mage::app()->getWebsite()->getId();
        $store = Mage::app()->getStore();

        $customer = Mage::getModel("customer/customer");
        $customer   ->setWebsiteId($websiteId)
                    ->setStore($store)
                    ->setFirstname('Test-Customer-Firstname-Ignore')
                    ->setLastname('Test-Customer-Lastname-Ignore')
                    ->setEmail($email)
                    ->setPassword('someTestPassword321');                         
        $customer->save();
        
        $address = $this->_createTestCustomerAddress($customer);
        $customer->setDefaultBilling($address->getId());
        $customer->save();
        
        return $customer;

    }
    
    private function _loadTestCustomerIntoSession($email = 'test@test.com')
    {
        $customer = Mage::getModel("customer/customer");
        $customer->setWebsiteId(Mage::app()->getWebsite()->getId());
        $customer->loadByEmail($email); //load customer by email i 
        
        if ($customer->getId() > 0)
        {
            $userSession = Mage::getSingleton('customer/session');
            $userSession->setCustomer($customer);
            // Don't trigger the linked observers.
            // Mage::dispatchEvent('customer_login', array('customer'=>$customer));
        }
    }

    /**
     * @covers ApdInteract_Requestprice_Helper_Data::getMinimumDate
     * @todo   Implement testGetMinimumDate().
     */
    public function testGetMinimumDate()
    {
        $testCategories = array(
            'tyres' => 4,
            'wheels' => 6,
            'batteries' => 1,
            'other' => 6
        );
        
        foreach ($testCategories as $category=>$expected)
        {
            $actual = $this->helper->requestprice->getMinimumDate('/' . $category);
            $this->assertEquals($actual, $expected, "FAIL: Category: {$category} - Expected:{$expected}, Actual:{$actual}");
        }
            
    }

    /**
     * @covers ApdInteract_Requestprice_Helper_Data::getTestProductDetails
     * @todo   Implement testGetTestProductDetails().
     */
    public function testGetTestProductDetails()
    {
        $sku = '529713-P';
        $qty = 7;
        $child_option = 0;
        
        $expected = array(
            'productId' => '63',
            'qty' => 7,
            'configurableAttributeId' => '180',
            'randomAttributeValueId' => '943'            
        );
        
        $actual = $this->helper->requestprice->getTestProductDetails($sku, $qty, $child_option);
        
        $this->assertEquals($actual, $expected);
    }
    
    private function _orderToString($order)
    {
        $output = '';
        
        foreach ($order->getAllVisibleItems() as $item)
        {
            $output .= $item->getQtyOrdered() . ' x ' . $item->getName() . ' (' . $item->getSku() . ") \r\n";
        }
        
        return $output;
    }
    
        
    
    /**
     * @covers ApdInteract_Requestprice_Helper_Data::getCustomerDetails
     * @todo   Implement testGetCustomerDetails().
     */
    public function testGetCustomerDetails()
    {
        
        $expected_values = array(
            'fname' => 'Test-Customer-Firstname-Ignore',
            'lname' => 'Test-Customer-Lastname-Ignore',
            'email' => 'test@test.com',
            // 'phone' => '0409123456',
        );
        
        $customer = $this->_createTestCustomer($expected_values['email']);        
        
        $this->_mockCustomerSession($customer);          
        
        foreach ($expected_values as $field => $expected)
        {
            $actual = $this->helper->requestprice->getCustomerDetails($field);                
            $this->assertEquals($expected, $actual);
        }

        $this->_deleteTestCustomer($expected_values['email']);        
    }
    
}
